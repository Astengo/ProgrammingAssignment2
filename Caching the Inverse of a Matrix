#This function cache's the inverse of a matrix
# makeCacheMatrix creates a special "matrix", which is really a list containing a function to
# set the value of the matrix
# get the value of the matrix
# set the value of the Inverse trough solve function
# get the value of the Inverse 

makeCacheMatrix <- function( x = matrix(),... ) 
{
    m <- NULL
    set <- function( matrix ) {
            x <<- matrix
            m <<- NULL
    }
    get <- function() x
    setInverse <- function(solve) m <<- solve
    getInverse <- function() m 
    list(set = set, get = get,
         setInverse = setInverse,
         getInverse = getInverse)
}



# Returns a matrix that is the inverse of 'x' , 'cacheSolve' searches the cache for the inverse of the matrix provided.
# If available, the function retrieves the inverse, else computes the inverse and stores it in the cache, using methods 
# defined in 'makeCacheMatrix'. Returns the inverse.



cacheSolve <- function(x, ...) {
    m <- x$getInverse()

    if( !is.null(m) ) {
            message("getting cached data")
            return(m)
    }

    matriz <- x$get()
    m <- solve(matriz)
    x$setInverse(m)
    m
}




# Salida código
# M<-matrix(c(1,2,3,4),nrow=2,ncol=2,byrow=TRUE)
# x<-makeCacheMatrix(M)
# MI<-cacheSolve(x)

# PROOF
# M %*% MI
# MI %*% M



# Salida código de ejemplo
#>  x<-makeVector(c(1,2,3))
#> makeVector(x)
# ...
#> cachemean(x)
#[1] 2
